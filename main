import customtkinter
import tkinter as tk


customtkinter.set_appearance_mode("Dark")  # Modes: "System" (standard), "Dark", "Light"
customtkinter.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

class App(customtkinter.CTk):
    def __init__(self):
        super().__init__()

        # configure window
        self.title("Calculator")
        self.geometry(f"{320}x{400}")

        # Type hinting for readability
        self.f_num: float = None
        self.math: str = None
        
        # Create Entry widget to display the input and output
        self.result = customtkinter.CTkEntry(self, font=("SF Display", 30), justify="right", text_color="#ffffff", 
                                             placeholder_text="0", placeholder_text_color="#ffffff", hover_color="#095140",)
        self.result.grid(row=0, column=0, columnspan=4, padx=(10,10), pady=10, ipadx=70, ipady=20)

        # Define button parameters in a dictionary
        button_params = {
            # text, width, fg_color, hover_color, text_color, command
            "Clear": (70, "#D4D4D2", "#e6e6e6", "#1C1C1C", self.button_clear),
            "+/-": (70, "#D4D4D2", "#e6e6e6", "#1C1C1C", self.button_negative),
            "%": (70, "#D4D4D2", "#e6e6e6", "#1C1C1C", self.button_percentage),
            "/": (70, "#FF9500", "#faaf46", ("gray10", "#DCE4EE"), self.button_divide),

            "7": (70, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(7)),
            "8": (70, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(8)),
            "9": (70, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(9)),
            "*": (70, "#FF9500", "#faaf46", ("gray10", "#DCE4EE"), self.button_multiply),
                       
            "4": (70, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(4)),
            "5": (70, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(5)),
            "6": (70, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(6)),
            "-": (70, "#FF9500", "#faaf46", ("gray10", "#DCE4EE"), self.button_subtract),

            "1": (70, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(1)),
            "2": (70, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(2)),
            "3": (70, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(3)),
            "+": (70, "#FF9500", "#faaf46", ("gray10", "#DCE4EE"), self.button_add),

            "0": (150, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(0)),
            ".": (70, "#505050", "#6e6d6d", "#DCE4EE", lambda: self.button_click(".")),
            "=": (70, "#FF9500", "#faaf46", ("gray10", "#DCE4EE"), self.button_equal)
        }

        # Create buttons using the dictionary
        for i, (text, params) in enumerate(button_params.items()):
            width, fg_color, hover_color, text_color, command = params
            button = customtkinter.CTkButton(self, width=width, corner_radius=100, fg_color=fg_color, hover_color=hover_color, 
                                             text=text, text_color=text_color, command=command)
            if text not in "0, ., =":
                button.grid(row=i//4+1, column=i%4, padx=5, pady=5, ipady=10)
            elif text == "0":
                button.grid(row=5, column=0, columnspan=2, padx=5, pady=5, ipady=10)
            elif text == ".":
                button.grid(row=5, column=2, columnspan=1, padx=5, pady=5, ipady=10)
            elif text == "=":
                button.grid(row=5, column=3, columnspan=1, padx=5, pady=5, ipady=10)

    # Function to update the input in the Entry widget
    def button_click(self, number):
        self.error_check(self.result)
        current = self.result.get()
        self.result.delete(0, tk.END)
        self.result.insert(0, f"{current}{number}")

    def button_clear(self):
        self.result.delete(0, tk.END)

    def button_add(self):
        self.error_check(self.result)
        first_number = self.result.get()
        self.math = "addition"
        self.f_num = float(first_number)
        self.result.delete(0, tk.END)

    def button_subtract(self):
        self.error_check(self.result)
        first_number = self.result.get()
        self.math = "subtraction"
        self.f_num = float(first_number)
        self.result.delete(0, tk.END)

    def button_multiply(self):
        self.error_check(self.result)
        first_number = self.result.get()
        self.math = "multiplication"
        self.f_num = float(first_number)
        self.result.delete(0, tk.END)

    def button_divide(self):
        self.error_check(self.result)
        first_number = self.result.get()
        self.math = "division"
        self.f_num = float(first_number)
        self.result.delete(0, tk.END)

    def button_divide(self):
        try:
            self.error_check(self.result)
            first_number = self.result.get()
            self.f_num = float(first_number)
            self.math = "division"
            self.result.delete(0, tk.END)
        except ValueError:
            self.result.delete(0, tk.END)
            self.result.insert(0, "Error")
        except ZeroDivisionError:
            self.result.delete(0, tk.END)
            self.result.insert(0, "Error")
        except:
            self.result.delete(0, tk.END)
            self.result.insert(0, "Error")

    def button_percentage(self):
        self.error_check(self.result)
        first_number = self.result.get()
        self.math = "percentage"
        self.f_num = float(first_number)
        self.result.delete(0, tk.END)

    def button_negative(self):
        self.error_check(self.result)
        first_number = self.result.get()
        if first_number:  # check if first_number is not empty
            self.math = "negative"
            self.f_num = -float(first_number)  # negate the first number
            if self.f_num.is_integer():
                self.f_num = int(self.f_num)
            self.result.delete(0, tk.END)
            self.result.insert(0, self.f_num)

    # Transforms result into an integer 
    def int_check(self, result):
        if result.is_integer():
                result = int(result)
        self.result.insert(0, result)

    # If the result shows error, clear the display
    def error_check(self):
        if self.result.get() == "Error": 
            self.result.delete(0, tk.END)

    def button_equal(self):
        self.error_check(self.result)
        second_number = self.result.get()
        self.result.delete(0, tk.END)

        if self.math == "addition":
            result = self.f_num + float(second_number)
            self.int_check(result)

        elif self.math == "subtraction":
            result = self.f_num - float(second_number)
            self.int_check(result)

        elif self.math == "multiplication":
            result = self.f_num * float(second_number)
            self.int_check(result)

        elif self.math == "division":
            try:
                result = self.f_num / float(second_number)
                self.result.delete(0, tk.END)
                self.int_check(result)
            except:
                self.result.delete(0, tk.END)
                self.result.insert(0, "Error")

        elif self.math == "percentage":
            result = 100 * self.f_num / float(second_number)
            self.int_check(result)

        elif self.math == "negative":
            if self.f_num < 0:
                result = -float(second_number) if second_number else 0
            else:
                result = -self.f_num
            self.int_check(result)

if __name__ == "__main__":
    app = App()
    app.resizable(width=False, height=False)
    app.mainloop()
